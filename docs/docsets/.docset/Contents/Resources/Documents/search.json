{"Functions.html#/c:@F@defaultJIT":{"name":"defaultJIT","abstract":"<p>Returns the default code generator for JIT compilation.</p>"},"Functions.html#/c:@F@defaultStaticCompilterWithFile":{"name":"defaultStaticCompilterWithFile","abstract":"<p>Returns the default code generator for static compilation, outputting to the"},"Functions.html#/c:LKSymbolTable.h@F@NSStringFromRuntimeString":{"name":"NSStringFromRuntimeString","abstract":"<p>Creates an NSString from a string returned by the runtime.  These strings"},"Type Definitions/LKSymbolQualifier/.html#/c:@EA@LKSymbolQualifier@LKSymbolQualifierStrong":{"name":"LKSymbolQualifierStrong","abstract":"<p>Strong reference.</p>"},"Type Definitions/LKSymbolQualifier/.html#/c:@EA@LKSymbolQualifier@LKSymbolQualifierUnretained":{"name":"LKSymbolQualifierUnretained","abstract":"<p>Unsafe unretained reference.  No write barriers should be emitted for"},"Type Definitions/LKSymbolQualifier/.html#/c:@EA@LKSymbolQualifier@LKSymbolQualifierWeak":{"name":"LKSymbolQualifierWeak","abstract":"<p>Zeroing weak reference.  Weak read and write barriers should be emitted.</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeInvalid":{"name":"LKSymbolScopeInvalid","abstract":"<p>Undocumented</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeExternal":{"name":"LKSymbolScopeExternal","abstract":"<p>Undocumented</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeArgument":{"name":"LKSymbolScopeArgument","abstract":"<p>Bound variable referenced in a block</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeLocal":{"name":"LKSymbolScopeLocal","abstract":"<p>Variable passed in to method / block</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeObject":{"name":"LKSymbolScopeObject","abstract":"<p>Variable declared in this lexical scope</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeClass":{"name":"LKSymbolScopeClass","abstract":"<p>Instance variable</p>"},"Type Definitions/LKSymbolScope/.html#/c:@EA@LKSymbolScope@LKSymbolScopeGlobal":{"name":"LKSymbolScopeGlobal","abstract":"<p>Class variable</p>"},"Type Definitions/LKDebuggingMode/.html#/c:@EA@LKDebuggingMode@LKDebuggingDisabled":{"name":"LKDebuggingDisabled","abstract":"<p>Undocumented</p>"},"Type Definitions/LKDebuggingMode/.html#/c:@EA@LKDebuggingMode@LKDebuggingEnabled":{"name":"LKDebuggingEnabled","abstract":"<p>Undocumented</p>"},"Type Definitions/LKDebuggingMode.html":{"name":"LKDebuggingMode","abstract":"<p>Undocumented</p>"},"Type Definitions.html#/c:LKCompiler.h@T@LKClassLoader":{"name":"LKClassLoader","abstract":"<p>Type of a block to be called when the runtime tries to resolve a class that"},"Type Definitions/LKSymbolScope.html":{"name":"LKSymbolScope","abstract":"<p>Undocumented</p>"},"Type Definitions/LKSymbolQualifier.html":{"name":"LKSymbolQualifier","abstract":"<p>Undocumented</p>"},"Protocols/LKCompilerDelegate.html#/c:objc(pl)LKCompilerDelegate(im)compiler:generatedWarning:details:":{"name":"-compiler:generatedWarning:details:","abstract":"<p>Indicates that the specified compiler has encountered a recoverable problem.","parent_name":"LKCompilerDelegate"},"Protocols/LKCompilerDelegate.html#/c:objc(pl)LKCompilerDelegate(im)compiler:generatedError:details:":{"name":"-compiler:generatedError:details:","abstract":"<p>Indicates that the specified compiler has encountered an unrecoverable","parent_name":"LKCompilerDelegate"},"Protocols/LKParser.html#/c:objc(pl)LKParser(im)parseString:":{"name":"-parseString:","abstract":"<p>Returns a module AST constructed by parsing the specified source.","parent_name":"LKParser"},"Protocols/LKParser.html#/c:objc(pl)LKParser(im)parseMethod:":{"name":"-parseMethod:","abstract":"<p>Returns a method AST constructed by parsing the specified source, or nil if","parent_name":"LKParser"},"Protocols/LKStaticCodeGenerator.html#/c:objc(pl)LKStaticCodeGenerator(im)initWithFile:":{"name":"-initWithFile:","abstract":"<p>Initializes the code generator with the specified file.</p>","parent_name":"LKStaticCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)startModule:":{"name":"-startModule:","abstract":"<p>Begin generating a module.  A module is a set of classes and categories","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)endModule":{"name":"-endModule","abstract":"<p>Finish generating a module.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)createSubclassWithName:superclassNamed:withSymbolTable:":{"name":"-createSubclassWithName:superclassNamed:withSymbolTable:","abstract":"<p>Create a new class, with the specified superclass.  The symbol table should","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)endClass":{"name":"-endClass","abstract":"<p>Finish the current class.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)createCategoryWithName:onClassNamed:":{"name":"-createCategoryWithName:onClassNamed:","abstract":"<p>Create a new category with the specified name on the named class.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)endCategory":{"name":"-endCategory","abstract":"<p>Finish the current category.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)beginClassMethod:withTypeEncoding:arguments:locals:":{"name":"-beginClassMethod:withTypeEncoding:arguments:locals:","abstract":"<p>Begin a class method with the specified type encoding and number of local","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)beginInstanceMethod:withTypeEncoding:arguments:locals:":{"name":"-beginInstanceMethod:withTypeEncoding:arguments:locals:","abstract":"<p>Begin an instance method with the specified type encoding and number of local","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)beginFunction:withTypeEncoding:arguments:locals:":{"name":"-beginFunction:withTypeEncoding:arguments:locals:","abstract":"<p>Begins compiling a free-standing function.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)sendMessage:types:to:withArgs:count:":{"name":"-sendMessage:types:to:withArgs:count:","abstract":"<p>Sends a message to a receiver which may be a SmallInt (a boxed Smalltalk","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)sendSuperMessage:types:withArgs:count:":{"name":"-sendSuperMessage:types:withArgs:count:","abstract":"<p>Sends a message to the superclass.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)sendMessage:types:toObject:withArgs:count:":{"name":"-sendMessage:types:toObject:withArgs:count:","abstract":"<p>Sends a message to an object.  Similar to","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)callFunction:typeEncoding:arguments:count:":{"name":"-callFunction:typeEncoding:arguments:count:","abstract":"<p>Calls a C function, with the specified type encoding.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)beginBlockWithArgs:locals:externals:signature:":{"name":"-beginBlockWithArgs:locals:externals:signature:","abstract":"<p>Begin generating a block expression with the specified number of arguments","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)loadSelf":{"name":"-loadSelf","abstract":"<p>Returns &lsquo;self&rsquo; in the current method.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)loadBlockContext":{"name":"-loadBlockContext","abstract":"<p>Returns the block object for the current closure.  Calling this when not in","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)loadClassNamed:":{"name":"-loadClassNamed:","abstract":"<p>Load a pointer to the named class.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)storeValue:inVariable:":{"name":"-storeValue:inVariable:","abstract":"<p>Stores a value in the specified variable.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)loadVariable:":{"name":"-loadVariable:","abstract":"<p>Load the value of the specified local variable.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)endMethod":{"name":"-endMethod","abstract":"<p>End the current method.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)endBlock":{"name":"-endBlock","abstract":"<p>End the current block.  Subsequent calls will insert instructions into the","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)blockReturn:":{"name":"-blockReturn:","abstract":"<p>Specify the return value for a block.  For Smalltalk, this is the result of","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)setReturn:":{"name":"-setReturn:","abstract":"<p>Set the return value for a method.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)intConstant:":{"name":"-intConstant:","abstract":"<p>Returns a constant representing the string as an integer (either a SmallInt or a BigInt).</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)floatConstant:":{"name":"-floatConstant:","abstract":"<p>Return a constant representing the passed string.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)stringConstant:":{"name":"-stringConstant:","abstract":"<p>Return a constant representing the passed string.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)nilConstant":{"name":"-nilConstant","abstract":"<p>Returns nil as a constant.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)comparePointer:to:":{"name":"-comparePointer:to:","abstract":"<p>Compares two pointers.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)generateConstantSymbol:":{"name":"-generateConstantSymbol:","abstract":"<p>Generates a constant symbol (a boxed selector).</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)startBasicBlock:":{"name":"-startBasicBlock:","abstract":"<p>Starts a new basic block and returns a pointer to the basic block.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)currentBasicBlock":{"name":"-currentBasicBlock","abstract":"<p>Returns a pointer to the current basic block.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)moveInsertPointToBasicBlock:":{"name":"-moveInsertPointToBasicBlock:","abstract":"<p>Sets the current insert point to the specified basic block.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)branchOnCondition:true:false:":{"name":"-branchOnCondition:true:false:","abstract":"<p>Compares aCondition to the SmallInt value for NO (1) and executes the first","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)goToBasicBlock:":{"name":"-goToBasicBlock:","abstract":"<p>Ends the current basic block with an unconditional jump to the specified","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)setBasicBlock:forLabel:":{"name":"-setBasicBlock:forLabel:","abstract":"<p>Associate a basic block with the specified label for later retrieval.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)basicBlockForLabel:":{"name":"-basicBlockForLabel:","abstract":"<p>Returns the basic block associated with the specified label.</p>","parent_name":"LKCodeGenerator"},"Protocols/LKCodeGenerator.html#/c:objc(pl)LKCodeGenerator(im)goToLabelledBasicBlock:":{"name":"-goToLabelledBasicBlock:","abstract":"<p>Ends the current basic block with an unconditional jump to the basic block","parent_name":"LKCodeGenerator"},"Protocols/LKASTVisitor.html#/c:objc(pl)LKASTVisitor(im)visitASTNode:":{"name":"-visitASTNode:","abstract":"<p>Visit the specified AST node.  The argument will be replaced by the return","parent_name":"LKASTVisitor"},"Protocols/LKASTVisitor.html":{"name":"LKASTVisitor","abstract":"<p>Protocol for AST visitors.  Used for classes that perform AST transforms.</p>"},"Protocols/LKCodeGenerator.html":{"name":"LKCodeGenerator","abstract":"<p>Code generator protocol.  Each AST node calls methods in a class conforming"},"Protocols/LKStaticCodeGenerator.html":{"name":"LKStaticCodeGenerator","abstract":"<p>Protocol for static code generators.</p>"},"Protocols/LKParser.html":{"name":"LKParser","abstract":"<p>All languages must use a parser conforming to this protocol.</p>"},"Protocols/LKCompilerDelegate.html":{"name":"LKCompilerDelegate","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKHumanReadableDescription":{"name":"kLKHumanReadableDescription","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKASTNode":{"name":"kLKASTNode","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKMissingSuperclassName":{"name":"kLKMissingSuperclassName","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKLineNumber":{"name":"kLKLineNumber","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKSourceLine":{"name":"kLKSourceLine","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKCharacterNumber":{"name":"kLKCharacterNumber","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKTypeEncoding":{"name":"kLKTypeEncoding","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@kLKHeaderName":{"name":"kLKHeaderName","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKUndefinedSymbolError":{"name":"LKUndefinedSymbolError","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKInvalidSelectorError":{"name":"LKInvalidSelectorError","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKUnknownTypeError":{"name":"LKUnknownTypeError","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKUndefinedSuperclassError":{"name":"LKUndefinedSuperclassError","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKRedefinedClassWarning":{"name":"LKRedefinedClassWarning","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKPolymorphicSelectorWarning":{"name":"LKPolymorphicSelectorWarning","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKMissingHeaderWarning":{"name":"LKMissingHeaderWarning","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKParserError":{"name":"LKParserError","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKEnumError":{"name":"LKEnumError","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@LKCompilerDidCompileNewClassesNotification":{"name":"LKCompilerDidCompileNewClassesNotification","abstract":"<p>Notification posted when new classes have been compiled.</p>"},"Classes/LKVariableDecl.html#/c:objc(cs)LKVariableDecl@variableName":{"name":"variableName","abstract":"<p>Undocumented</p>","parent_name":"LKVariableDecl"},"Classes/LKVariableDecl.html#/c:objc(cs)LKVariableDecl(cm)variableDeclWithName:":{"name":"+variableDeclWithName:","abstract":"<p>Undocumented</p>","parent_name":"LKVariableDecl"},"Classes/LKVariableDecl.html#/c:objc(cs)LKVariableDecl(im)name":{"name":"-name","abstract":"<p>Undocumented</p>","parent_name":"LKVariableDecl"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(py)declarationScope":{"name":"declarationScope","abstract":"<p>The AST node (class, block, method) that contains these declarations.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(py)enclosingScope":{"name":"enclosingScope","abstract":"<p>The parent scope for this symbol table.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(py)tableScope":{"name":"tableScope","abstract":"<p>The scope of this symbol table.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(py)symbols":{"name":"symbols","abstract":"<p>The symbols stored in this symbol table, indexed by name.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(cm)symbolTableForClass:":{"name":"+symbolTableForClass:","abstract":"<p>Returns the symbol table for a class.  If the class exists, then this will","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(cm)lookupTableForClass:":{"name":"+lookupTableForClass:","abstract":"<p>Returns the symbol table for a class.  If the class exists, then this will","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)addSymbol:":{"name":"-addSymbol:","abstract":"<p>Add a symbol to this table.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)addSymbolsNamed:ofKind:":{"name":"-addSymbolsNamed:ofKind:","abstract":"<p>Adds a set of symbols in one call.  The symbols have the specified scope and","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)symbolForName:":{"name":"-symbolForName:","abstract":"<p>Looks up the symbol for a specified name.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)arguments":{"name":"-arguments","abstract":"<p>Returns all of the symbols in this table that represent arguments.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)locals":{"name":"-locals","abstract":"<p>Returns all of the symbols in this table that represent local variables.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)classVariables":{"name":"-classVariables","abstract":"<p>Returns all of the symbols in this table that represent class variables.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)instanceVariables":{"name":"-instanceVariables","abstract":"<p>Returns all of the symbols in this table that represent instance variables.</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbolTable.html#/c:objc(cs)LKSymbolTable(im)byRefVariables":{"name":"-byRefVariables","abstract":"<p>Returns all of the symbols in this table that represent external symbols..</p>","parent_name":"LKSymbolTable"},"Classes/LKSymbol.html#/c:objc(cs)LKSymbol(py)name":{"name":"name","abstract":"<p>The name of this symbol.</p>","parent_name":"LKSymbol"},"Classes/LKSymbol.html#/c:objc(cs)LKSymbol(py)typeEncoding":{"name":"typeEncoding","abstract":"<p>The Objective-C type encoding of this variable.</p>","parent_name":"LKSymbol"},"Classes/LKSymbol.html#/c:objc(cs)LKSymbol(py)owner":{"name":"owner","abstract":"<p>The AST node representing the variable</p>","parent_name":"LKSymbol"},"Classes/LKSymbol.html#/c:objc(cs)LKSymbol(py)scope":{"name":"scope","abstract":"<p>The scope of this symbol.</p>","parent_name":"LKSymbol"},"Classes/LKSymbol.html#/c:objc(cs)LKSymbol(py)referencingScopes":{"name":"referencingScopes","abstract":"<p>The number of block scopes that reference this variable.  This does not","parent_name":"LKSymbol"},"Classes/LKSymbolRef.html#/c:objc(cs)LKSymbolRef@symbol":{"name":"symbol","abstract":"<p>The symbol.</p>","parent_name":"LKSymbolRef"},"Classes/LKSymbolRef.html#/c:objc(cs)LKSymbolRef(cm)referenceWithSymbol:":{"name":"+referenceWithSymbol:","abstract":"<p>Returns autoreleased reference for the specified symbol.</p>","parent_name":"LKSymbolRef"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass@classname":{"name":"classname","abstract":"<p>Name of this class.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass@superclass":{"name":"superclass","abstract":"<p>Name of the superclass.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass@methods":{"name":"methods","abstract":"<p>Array of methods defined in this class.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass@cvars":{"name":"cvars","abstract":"<p>Array of class variables defined for this class.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass@ivars":{"name":"ivars","abstract":"<p>Array of instance variables defined for this class.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass@properties":{"name":"properties","abstract":"<p>Array of properties defined for this class.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(cm)subclassWithName:superclassNamed:cvars:ivars:properties:methods:":{"name":"+subclassWithName:superclassNamed:cvars:ivars:properties:methods:","abstract":"<p>Return a new Subclass with the specified name, superclass and list of","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)classname":{"name":"-classname","abstract":"<p>Returns the class name for the represented class.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)superclassname":{"name":"-superclassname","abstract":"<p>Returns the superclass name for the class represented by this AST node.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)methods":{"name":"-methods","abstract":"<p>Returns the methods</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)addInstanceVariable:":{"name":"-addInstanceVariable:","abstract":"<p>Adds a new instance variable.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)instanceVariables":{"name":"-instanceVariables","abstract":"<p>Returns an array of all of the names of instance variables.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)classVariables":{"name":"-classVariables","abstract":"<p>Returns an array of all of the names of class variables.</p>","parent_name":"LKSubclass"},"Classes/LKSubclass.html#/c:objc(cs)LKSubclass(im)properties":{"name":"-properties","abstract":"<p>Returns an array of all of the names of properties.</p>","parent_name":"LKSubclass"},"Classes/LKReturn.html#/c:objc(cs)LKReturn@ret":{"name":"ret","abstract":"<p>Value to be returned.</p>","parent_name":"LKReturn"},"Classes/LKReturn.html#/c:objc(cs)LKReturn(cm)returnWithExpr:":{"name":"+returnWithExpr:","abstract":"<p>Autoreleased instance with an expression containing the value to return.</p>","parent_name":"LKReturn"},"Classes/LKReturn.html#/c:objc(cs)LKReturn(im)initWithExpr:":{"name":"-initWithExpr:","abstract":"<p>Initialise with an expression containing the value to return.</p>","parent_name":"LKReturn"},"Classes/LKReturn.html#/c:objc(cs)LKReturn(im)expression":{"name":"-expression","abstract":"<p>Returns the return statement&rsquo;s expression AST node.</p>","parent_name":"LKReturn"},"Classes/LKProperty.html#/c:objc(cs)LKProperty@variableName":{"name":"variableName","abstract":"<p>Undocumented</p>","parent_name":"LKProperty"},"Classes/LKProperty.html#/c:objc(cs)LKProperty(cm)propertyDeclWithName:":{"name":"+propertyDeclWithName:","abstract":"<p>Undocumented</p>","parent_name":"LKProperty"},"Classes/LKProperty.html#/c:objc(cs)LKProperty(im)name":{"name":"-name","abstract":"<p>Undocumented</p>","parent_name":"LKProperty"},"Classes/LKModule.html#/c:objc(cs)LKModule@classes":{"name":"classes","abstract":"<p>Classes defined in this module.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule@categories":{"name":"categories","abstract":"<p>Categories defined in this module.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule@pragmas":{"name":"pragmas","abstract":"<p>Current pragmas</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule@typeOverrides":{"name":"typeOverrides","abstract":"<p>Manually-specified method types.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(cm)module":{"name":"+module","abstract":"<p>Return a new autoreleased module.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)addPragmas:":{"name":"-addPragmas:","abstract":"<p>Add compile-time pragmas.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)addClass:":{"name":"-addClass:","abstract":"<p>Add a new class to this module.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)addCategory:":{"name":"-addCategory:","abstract":"<p>Add a new category to this module.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)typesForMethod:":{"name":"-typesForMethod:","abstract":"<p>Returns an array of the types for a given selector name.</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)allClasses":{"name":"-allClasses","abstract":"<p>Returns the classes in this module</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)allCategories":{"name":"-allCategories","abstract":"<p>Returns the categories in this module</p>","parent_name":"LKModule"},"Classes/LKModule.html#/c:objc(cs)LKModule(im)pragmas":{"name":"-pragmas","abstract":"<p>Returns the pragmas in this module</p>","parent_name":"LKModule"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(py)signature":{"name":"signature","abstract":"<p>Method signature - selector and names of arguments.</p>","parent_name":"LKMethod"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(py)locals":{"name":"locals","abstract":"<p>List of local variables</p>","parent_name":"LKMethod"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(py)statements":{"name":"statements","abstract":"<p>List of statements in this method.</p>","parent_name":"LKMethod"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(cm)methodWithSignature:locals:statements:":{"name":"+methodWithSignature:locals:statements:","abstract":"<p>Return a new Method with the specified signature, locals and statements.</p>","parent_name":"LKMethod"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(im)initWithSignature:locals:statements:":{"name":"-initWithSignature:locals:statements:","abstract":"<p>Initialise a new Method with the specified signature, locals and statements.</p>","parent_name":"LKMethod"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(im)methodBody":{"name":"-methodBody","abstract":"<p>Returns the method&rsquo;s body</p>","parent_name":"LKMethod"},"Classes/LKMethod.html#/c:objc(cs)LKMethod(im)isClassMethod":{"name":"-isClassMethod","abstract":"<p>Returns YES if this is a class method.</p>","parent_name":"LKMethod"},"Classes/LKMessageCascade.html#/c:objc(cs)LKMessageCascade@receiver":{"name":"receiver","abstract":"<p>Undocumented</p>","parent_name":"LKMessageCascade"},"Classes/LKMessageCascade.html#/c:objc(cs)LKMessageCascade@messages":{"name":"messages","abstract":"<p>Undocumented</p>","parent_name":"LKMessageCascade"},"Classes/LKMessageCascade.html#/c:objc(cs)LKMessageCascade(cm)messageCascadeWithTarget:messages:":{"name":"+messageCascadeWithTarget:messages:","abstract":"<p>Undocumented</p>","parent_name":"LKMessageCascade"},"Classes/LKMessageCascade.html#/c:objc(cs)LKMessageCascade(im)addMessage:":{"name":"-addMessage:","abstract":"<p>Undocumented</p>","parent_name":"LKMessageCascade"},"Classes/LKMessageCascade.html#/c:objc(cs)LKMessageCascade(im)target":{"name":"-target","abstract":"<p>Return the target</p>","parent_name":"LKMessageCascade"},"Classes/LKMessageCascade.html#/c:objc(cs)LKMessageCascade(im)messages":{"name":"-messages","abstract":"<p>Undocumented</p>","parent_name":"LKMessageCascade"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend@target":{"name":"target","abstract":"<p>Receiver of the message.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend@selector":{"name":"selector","abstract":"<p>The message selector.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend@arguments":{"name":"arguments","abstract":"<p>Array of AST nodes which evaluate to the message arguments.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend@type":{"name":"type","abstract":"<p>Array of possible type encodings for the method</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(cm)message":{"name":"+message","abstract":"<p>Return a new message send.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(cm)messageWithSelectorName:":{"name":"+messageWithSelectorName:","abstract":"<p>Return a new message send with the specified selector.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(cm)messageWithSelectorName:arguments:":{"name":"+messageWithSelectorName:arguments:","abstract":"<p>Return a new message send with the specified selector and arguments.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)initWithSelectorName:":{"name":"-initWithSelectorName:","abstract":"<p>Initialize with the specified selector.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)setTarget:":{"name":"-setTarget:","abstract":"<p>Set the receiver of the message.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)addSelectorComponent:":{"name":"-addSelectorComponent:","abstract":"<p>Add a component of the selector.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)addArgument:":{"name":"-addArgument:","abstract":"<p>Add an argument.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)arguments":{"name":"-arguments","abstract":"<p>Return all of the arguments of this message.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)selector":{"name":"-selector","abstract":"<p>Return the selector.</p>","parent_name":"LKMessageSend"},"Classes/LKMessageSend.html#/c:objc(cs)LKMessageSend(im)target":{"name":"-target","abstract":"<p>Return the target</p>","parent_name":"LKMessageSend"},"Classes/LKContinue.html#/c:objc(cs)LKContinue(cm)continueWithLabel:":{"name":"+continueWithLabel:","abstract":"<p>Return a new continue statement with the given label.</p>","parent_name":"LKContinue"},"Classes/LKBreak.html#/c:objc(cs)LKBreak(cm)breakWithLabel:":{"name":"+breakWithLabel:","abstract":"<p>Return a new break statement with the given label.</p>","parent_name":"LKBreak"},"Classes/LKLoopFlowControl.html#/c:objc(cs)LKLoopFlowControl@label":{"name":"label","abstract":"<p>Undocumented</p>","parent_name":"LKLoopFlowControl"},"Classes/LKLoopFlowControl.html#/c:objc(cs)LKLoopFlowControl(im)initWithLabel:":{"name":"-initWithLabel:","abstract":"<p>Initialise a new break or continue statement with the given label.</p>","parent_name":"LKLoopFlowControl"},"Classes/LKLoopFlowControl.html#/c:objc(cs)LKLoopFlowControl(im)flowControlFlavor":{"name":"-flowControlFlavor","abstract":"<p>Return string <q>break</q> or <q>continue</q> depending on type of control statement.</p>","parent_name":"LKLoopFlowControl"},"Classes/LKLoop.html#/c:objc(cs)LKLoop@label":{"name":"label","abstract":"<p>Label used for break or continue in nested loops.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop@statements":{"name":"statements","abstract":"<p>List of statements in the loop body.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop@loopInitStatements":{"name":"loopInitStatements","abstract":"<p>List of statements to initialize the loop.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop@updateStatements":{"name":"updateStatements","abstract":"<p>List of statements executed after each iteration of the loop.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop@preCondition":{"name":"preCondition","abstract":"<p>Expression to be tested for truth before each loop iteration.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop@postCondition":{"name":"postCondition","abstract":"<p>Expression to be tested for truth after each loop iteration.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(py)loopInitStatements":{"name":"loopInitStatements","abstract":"<p>List of statements executed after each iteration of the loop.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(cm)loopWithStatements:":{"name":"+loopWithStatements:","abstract":"<p>Return a new loop with the specified statements.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(im)initWithStatements:":{"name":"-initWithStatements:","abstract":"<p>Initialise a new loop with the specified statements.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(py)label":{"name":"label","abstract":"<p>The label used for break or continue in nested loops.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(py)statements":{"name":"statements","abstract":"<p>The list of statements in the loop body.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(py)updateStatements":{"name":"updateStatements","abstract":"<p>The list of statements executed after each iteration of the loop.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(py)preCondition":{"name":"preCondition","abstract":"<p>Expression tested for truth before each loop iteration.</p>","parent_name":"LKLoop"},"Classes/LKLoop.html#/c:objc(cs)LKLoop(py)postCondition":{"name":"postCondition","abstract":"<p>Expression tested for truth after each loop iteration.</p>","parent_name":"LKLoop"},"Classes/LKNumberLiteral.html#/c:objc(cs)LKNumberLiteral(cm)literalFromSymbol:":{"name":"+literalFromSymbol:","abstract":"<p>Creates a constant literal with the specified name.</p>","parent_name":"LKNumberLiteral"},"Classes/LKLiteral.html#/c:objc(cs)LKLiteral@value":{"name":"value","abstract":"<p>String representation of value.  Used because this can be a literal too</p>","parent_name":"LKLiteral"},"Classes/LKLiteral.html#/c:objc(cs)LKLiteral(cm)literalFromString:":{"name":"+literalFromString:","abstract":"<p>Undocumented</p>","parent_name":"LKLiteral"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement@condition":{"name":"condition","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement@thenStatements":{"name":"thenStatements","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement@elseStatements":{"name":"elseStatements","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement(cm)ifStatementWithCondition:then:else:":{"name":"+ifStatementWithCondition:then:else:","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement(cm)ifStatementWithCondition:":{"name":"+ifStatementWithCondition:","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement(im)setElseStatements:":{"name":"-setElseStatements:","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKIfStatement.html#/c:objc(cs)LKIfStatement(im)setThenStatements:":{"name":"-setThenStatements:","abstract":"<p>Undocumented</p>","parent_name":"LKIfStatement"},"Classes/LKFunctionCall.html#/c:objc(cs)LKFunctionCall(py)functionName":{"name":"functionName","abstract":"<p>The name of the called function.</p>","parent_name":"LKFunctionCall"},"Classes/LKFunctionCall.html#/c:objc(cs)LKFunctionCall(py)typeEncoding":{"name":"typeEncoding","abstract":"<p>The type encoding of the function.</p>","parent_name":"LKFunctionCall"},"Classes/LKFunctionCall.html#/c:objc(cs)LKFunctionCall(py)arguments":{"name":"arguments","abstract":"<p>The function arguments.</p>","parent_name":"LKFunctionCall"},"Classes/LKEnumReference.html#/c:objc(cs)LKEnumReference@enumName":{"name":"enumName","abstract":"<p>Undocumented</p>","parent_name":"LKEnumReference"},"Classes/LKEnumReference.html#/c:objc(cs)LKEnumReference@enumValue":{"name":"enumValue","abstract":"<p>Undocumented</p>","parent_name":"LKEnumReference"},"Classes/LKEnumReference.html#/c:objc(cs)LKEnumReference@value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"LKEnumReference"},"Classes/LKEnumReference.html#/c:objc(cs)LKEnumReference(im)initWithValue:inEnumeration:":{"name":"-initWithValue:inEnumeration:","abstract":"<p>Undocumented</p>","parent_name":"LKEnumReference"},"Classes/LKBuiltinSymbol.html#/c:objc(cs)LKBuiltinSymbol(cm)builtin":{"name":"+builtin","abstract":"<p>Returns a new autoreleased instance of he receiver.</p>","parent_name":"LKBuiltinSymbol"},"Classes/LKDeclRef.html#/c:objc(cs)LKDeclRef(py)symbol":{"name":"symbol","abstract":"<p>The name of the variable being referenced.  This is initially set to a</p>","parent_name":"LKDeclRef"},"Classes/LKDeclRef.html#/c:objc(cs)LKDeclRef(cm)referenceWithSymbol:":{"name":"+referenceWithSymbol:","abstract":"<p>Returns autoreleased reference for the specified symbol.</p>","parent_name":"LKDeclRef"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler@delegate":{"name":"delegate","abstract":"<p>Undocumented</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(py)transforms":{"name":"transforms","abstract":"<p>Undocumented</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)setDefaultDelegate:":{"name":"+setDefaultDelegate:","abstract":"<p>Sets the default delegate that will be used by new compiler instances.  If","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)setDelegate:":{"name":"-setDelegate:","abstract":"<p>Sets the delegate for this compiler.  The delegate is responsible for","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)addClassLoader:":{"name":"+addClassLoader:","abstract":"<p>Adds a new class loader.  These will be called in the order that they","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)compiler":{"name":"+compiler","abstract":"<p>Returns a new autoreleased compiler for this language.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)inDevMode":{"name":"+inDevMode","abstract":"<p>Returns whether we are in developer mode.  In this mode, all unrecognised","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)setDebugMode:":{"name":"+setDebugMode:","abstract":"<p>Specifies whether the compiler should run in debug mode.  Enabling this will","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)compileString:":{"name":"-compileString:","abstract":"<p>Compiles and loads the specified source code.  Returns the AST on success,","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)compileString:withGenerator:":{"name":"-compileString:withGenerator:","abstract":"<p>Compiles the specified source code using the given code generator. Returns","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)compileMethod:onClassNamed:":{"name":"-compileMethod:onClassNamed:","abstract":"<p>Compiles and loads a method on the class with the specified name.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)compileMethod:onClassNamed:output:":{"name":"-compileMethod:onClassNamed:output:","abstract":"<p>Compiles a method to LLVM bitcode for the class with the specified name.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)compileMethod:onClassNamed:withGenerator:":{"name":"-compileMethod:onClassNamed:withGenerator:","abstract":"<p>Compiles a method on the class with the specified name using the given code","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadFrameworkNamed:":{"name":"+loadFrameworkNamed:","abstract":"<p>Load a framework with the specified name.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadScriptNamed:fromBundle:":{"name":"+loadScriptNamed:fromBundle:","abstract":"<p>Compiles and loads a file from the specified bundle.","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)loadScriptNamed:fromBundle:":{"name":"-loadScriptNamed:fromBundle:","abstract":"<p>Compiles and loads a file from the specified bundle.","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadApplicationScriptNamed:":{"name":"+loadApplicationScriptNamed:","abstract":"<p>Compiles and loads a file from the application bundle.","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)loadApplicationScriptNamed:":{"name":"-loadApplicationScriptNamed:","abstract":"<p>Compiles and loads a file from the application bundle.","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadScriptsFromBundle:":{"name":"+loadScriptsFromBundle:","abstract":"<p>Loads all scripts for all known languages from the specified bundle.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)loadScriptsFromBundle:":{"name":"-loadScriptsFromBundle:","abstract":"<p>Loads all scripts written in this language from the specified bundle.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadAllScriptsForApplication":{"name":"+loadAllScriptsForApplication","abstract":"<p>Loads all scripts for all known languages from the application bundle.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(im)loadAllScriptsForApplication":{"name":"-loadAllScriptsForApplication","abstract":"<p>Loads all scripts written in this language from the application bundle.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)compileLanguageKitBundle:output:":{"name":"+compileLanguageKitBundle:output:","abstract":"<p>Loads a bundle containing an LKInfo.plist file.  This should contain a","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadLanguageKitBundle:":{"name":"+loadLanguageKitBundle:","abstract":"<p>Loads a bundle containing an LKInfo.plist file.  This should contain a","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadAllPlugInsForApplication":{"name":"+loadAllPlugInsForApplication","abstract":"<p>Loads all of the LanguageKit plugins for the current application.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadHeader:":{"name":"+loadHeader:","abstract":"<p>Attempts to parse a C header.  Returns YES on success, NO on failure.","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)loadLibrary:":{"name":"+loadLibrary:","abstract":"<p>Attempts to load a library from an absolute path or one of the standard","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)fileExtension":{"name":"+fileExtension","abstract":"<p><override-subclass />","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)languageName":{"name":"+languageName","abstract":"<p><override-subclass />","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)supportedLanguageNames":{"name":"+supportedLanguageNames","abstract":"<p>Returns the languages for which compilers are currently supported.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)compilerForLanguage:":{"name":"+compilerForLanguage:","abstract":"<p>Returns the compiler for a named language.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)compilerClassForFileExtension:":{"name":"+compilerClassForFileExtension:","abstract":"<p>Returns the compiler for files with a given extension.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)parserClass":{"name":"+parserClass","abstract":"<p><override-subclass />","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)reportWarning:details:":{"name":"+reportWarning:details:","abstract":"<p>Reports the given warning and returns YES if recovery should proceed.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)reportError:details:":{"name":"+reportError:details:","abstract":"<p>Reports the given error and returns YES if recovery should proceed.</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)parseScript:forFileExtension:":{"name":"+parseScript:forFileExtension:","abstract":"<p>Undocumented</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)justTooLateCompileBundle:":{"name":"+justTooLateCompileBundle:","abstract":"<p>Undocumented</p>","parent_name":"LKCompiler"},"Classes/LKCompiler.html#/c:objc(cs)LKCompiler(cm)linkBitcodeFiles:outputDir:outputFile:":{"name":"+linkBitcodeFiles:outputDir:outputFile:","abstract":"<p>Link LKModule into a library.</p>","parent_name":"LKCompiler"},"Classes/LKCompare.html#/c:objc(cs)LKCompare@lhs":{"name":"lhs","abstract":"<p>Undocumented</p>","parent_name":"LKCompare"},"Classes/LKCompare.html#/c:objc(cs)LKCompare@rhs":{"name":"rhs","abstract":"<p>Undocumented</p>","parent_name":"LKCompare"},"Classes/LKCompare.html#/c:objc(cs)LKCompare(cm)comparisonWithLeftExpression:rightExpression:":{"name":"+comparisonWithLeftExpression:rightExpression:","abstract":"<p>Undocumented</p>","parent_name":"LKCompare"},"Classes/LKCompare.html#/c:objc(cs)LKCompare(im)leftExpression":{"name":"-leftExpression","abstract":"<p>Return the left hand expression</p>","parent_name":"LKCompare"},"Classes/LKCompare.html#/c:objc(cs)LKCompare(im)rightExpression":{"name":"-rightExpression","abstract":"<p>Return the right hand expression</p>","parent_name":"LKCompare"},"Classes/LKComment.html#/c:objc(cs)LKComment@comment":{"name":"comment","abstract":"<p>Undocumented</p>","parent_name":"LKComment"},"Classes/LKComment.html#/c:objc(cs)LKComment(cm)commentWithString:":{"name":"+commentWithString:","abstract":"<p>Creates a new comment with the given string.</p>","parent_name":"LKComment"},"Classes/LKComment.html#/c:objc(cs)LKComment(im)stringValue":{"name":"-stringValue","abstract":"<p>Returns the string value of the comment.</p>","parent_name":"LKComment"},"Classes/LKCodeGenLoader.html#/c:objc(cs)LKCodeGenLoader(cm)defaultJIT":{"name":"+defaultJIT","abstract":"<p>Returns the default code generator for JIT compilation.</p>","parent_name":"LKCodeGenLoader"},"Classes/LKCodeGenLoader.html#/c:objc(cs)LKCodeGenLoader(cm)defaultStaticCompilerWithFile:":{"name":"+defaultStaticCompilerWithFile:","abstract":"<p>Returns the default code generator for static compilation, outputting to the","parent_name":"LKCodeGenLoader"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef@classname":{"name":"classname","abstract":"<p>Name of this class.</p>","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef@categoryName":{"name":"categoryName","abstract":"<p>Name of the category.</p>","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef@methods":{"name":"methods","abstract":"<p>Array of methods defined in this category.</p>","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef(py)classname":{"name":"classname","abstract":"<p>Undocumented</p>","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef(py)categoryName":{"name":"categoryName","abstract":"<p>Undocumented</p>","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef(py)methods":{"name":"methods","abstract":"<p>Undocumented</p>","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef(cm)categoryWithName:onClassNamed:methods:":{"name":"+categoryWithName:onClassNamed:methods:","abstract":"<p>Return a new Category with the specified name, class and list of","parent_name":"LKCategoryDef"},"Classes/LKCategoryDef.html#/c:objc(cs)LKCategoryDef(cm)categoryOnClassNamed:methods:":{"name":"+categoryOnClassNamed:methods:","abstract":"<p>Returns a new anonymous category.</p>","parent_name":"LKCategoryDef"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr@statements":{"name":"statements","abstract":"<p>List of statements in this node.</p>","parent_name":"LKBlockExpr"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr(cm)blockWithArguments:locals:statements:":{"name":"+blockWithArguments:locals:statements:","abstract":"<p>Return a new Block with the specified arguments, locals and statements.</p>","parent_name":"LKBlockExpr"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr(im)initWithArguments:locals:statements:":{"name":"-initWithArguments:locals:statements:","abstract":"<p>Initialise a new Block with the specified arguments, locals and statements.</p>","parent_name":"LKBlockExpr"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr(py)arguments":{"name":"arguments","abstract":"<p>List of arguments</p>","parent_name":"LKBlockExpr"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr(py)locals":{"name":"locals","abstract":"<p>List of local variables</p>","parent_name":"LKBlockExpr"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr(im)setStatements:":{"name":"-setStatements:","abstract":"<p>Set the statements in this node.</p>","parent_name":"LKBlockExpr"},"Classes/LKBlockExpr.html#/c:objc(cs)LKBlockExpr(im)statements":{"name":"-statements","abstract":"<p>Returns the list of statements in the block</p>","parent_name":"LKBlockExpr"},"Classes/LKAssignExpr.html#/c:objc(cs)LKAssignExpr@target":{"name":"target","abstract":"<p>The target of the assignment.</p>","parent_name":"LKAssignExpr"},"Classes/LKAssignExpr.html#/c:objc(cs)LKAssignExpr@expr":{"name":"expr","abstract":"<p>The expression representing the assigned value.</p>","parent_name":"LKAssignExpr"},"Classes/LKAssignExpr.html#/c:objc(cs)LKAssignExpr(cm)assignWithTarget:expr:":{"name":"+assignWithTarget:expr:","abstract":"<p>Return new assignment with target and expression.</p>","parent_name":"LKAssignExpr"},"Classes/LKAssignExpr.html#/c:objc(cs)LKAssignExpr(im)initWithTarget:expr:":{"name":"-initWithTarget:expr:","abstract":"<p>Initialise new assignment with target and expression.</p>","parent_name":"LKAssignExpr"},"Classes/LKAssignExpr.html#/c:objc(cs)LKAssignExpr(im)target":{"name":"-target","abstract":"<p>Returns the target of the assignment</p>","parent_name":"LKAssignExpr"},"Classes/LKAssignExpr.html#/c:objc(cs)LKAssignExpr(im)expression":{"name":"-expression","abstract":"<p>Returns the expression representing the assigned value.</p>","parent_name":"LKAssignExpr"},"Classes/LKArrayExpr.html#/c:objc(cs)LKArrayExpr@elements":{"name":"elements","abstract":"<p>Undocumented</p>","parent_name":"LKArrayExpr"},"Classes/LKArrayExpr.html#/c:objc(cs)LKArrayExpr(py)elements":{"name":"elements","abstract":"<p>Undocumented</p>","parent_name":"LKArrayExpr"},"Classes/LKArrayExpr.html#/c:objc(cs)LKArrayExpr(cm)arrayWithElements:":{"name":"+arrayWithElements:","abstract":"<p>Undocumented</p>","parent_name":"LKArrayExpr"},"Classes/LKArrayExpr.html#/c:objc(cs)LKArrayExpr(im)initWithElements:":{"name":"-initWithElements:","abstract":"<p>Undocumented</p>","parent_name":"LKArrayExpr"},"Classes/LKAST.html#/c:objc(cs)LKAST@parent":{"name":"parent","abstract":"<p>Node above this one in the tree.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST@isBracket":{"name":"isBracket","abstract":"<p>Is this a parenthetical expression?  Avoids creating explicit nodes for","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST@symbols":{"name":"symbols","abstract":"<p>Symbol table for this context.  If no new symbols are defined, this is a","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(cm)code":{"name":"+code","abstract":"<p>Returns the AST nodes available at runtime for subclasses and categories.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)module":{"name":"-module","abstract":"<p>Returns the module containing the current AST.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)initWithSymbolTable:":{"name":"-initWithSymbolTable:","abstract":"<p>Initialise a new AST node with the specified symbol table.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)setBracketed:":{"name":"-setBracketed:","abstract":"<p>Set whether the AST node represents a bracketed expression.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)isBracketed":{"name":"-isBracketed","abstract":"<p>Returns whether the AST node represents a bracketed expression.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)inheritSymbolTable:":{"name":"-inheritSymbolTable:","abstract":"<p>Inherits the given symbol table from the parent.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)setParent:":{"name":"-setParent:","abstract":"<p>Sets the parent of this node.  Also sets connections between the nodes&rsquo;","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)parent":{"name":"-parent","abstract":"<p>Returns the parent of this AST node.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)symbols":{"name":"-symbols","abstract":"<p>Returns the symbol table for this node.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)print":{"name":"-print","abstract":"<p>Prints the syntax tree from this node.  Use only for debugging.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)check":{"name":"-check","abstract":"<p>Performs semantic analysis on this node and all of its children.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)checkWithErrorReporter:":{"name":"-checkWithErrorReporter:","abstract":"<p>Performs semantic analysis on this node and all of its children, reporting","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)compileWithGenerator:":{"name":"-compileWithGenerator:","abstract":"<p>Compile this AST node with the specified code generator.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)isComment":{"name":"-isComment","abstract":"<p>Returns YES for AST nodes with no code generation</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)isBranch":{"name":"-isBranch","abstract":"<p>Returns YES for AST nodes that branch unconditionally.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(py)sourceRange":{"name":"sourceRange","abstract":"<p>Source Range</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)visitWithVisitor:":{"name":"-visitWithVisitor:","abstract":"<p>Visit the abstract syntax tree with the specified visitor.</p>","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)visitArray:withVisitor:":{"name":"-visitArray:withVisitor:","abstract":"<p>Convenience method.  Visits every element in a specified mutable array,","parent_name":"LKAST"},"Classes/LKAST.html#/c:objc(cs)LKAST(im)interpretInContext:":{"name":"-interpretInContext:","abstract":"<p>Interprets the AST node with the specified context object.  Returns the","parent_name":"LKAST"},"Classes/LKAST.html":{"name":"LKAST","abstract":"<p>Root class for AST nodes.  Every node in the abstract syntax tree inherits"},"Classes.html#/c:objc(cs)LKASTVisitor":{"name":"LKASTVisitor","abstract":"<p>Generic superclass for AST visitors.  Visitors subclassing this implement"},"Classes/LKArrayExpr.html":{"name":"LKArrayExpr","abstract":"<p>Undocumented</p>"},"Classes/LKAssignExpr.html":{"name":"LKAssignExpr","abstract":"<p>AST node representing an assignment.</p>"},"Classes/LKBlockExpr.html":{"name":"LKBlockExpr","abstract":"<p>AST node representing a block closure expression.</p>"},"Classes/LKCategoryDef.html":{"name":"LKCategoryDef","abstract":"<p>AST node representing a new category definition.</p>"},"Classes/LKCodeGenLoader.html":{"name":"LKCodeGenLoader","abstract":"<p>Class used to instantiate the default code generators.  Lazily loads the code"},"Classes/LKComment.html":{"name":"LKComment","abstract":"<p>Undocumented</p>"},"Classes/LKCompare.html":{"name":"LKCompare","abstract":"<p>Undocumented</p>"},"Classes/LKCompiler.html":{"name":"LKCompiler","abstract":"<p>Abstract class implementing a dynamic language compiler.  Concrete"},"Classes/LKDeclRef.html":{"name":"LKDeclRef","abstract":"<p>AST node representing a reference to a variable.</p>"},"Classes/LKBuiltinSymbol.html":{"name":"LKBuiltinSymbol","abstract":"<p>Abstract class for all built-in symbols.  These are subclasses of LKDeclRef,"},"Classes.html#/c:objc(cs)LKNilRef":{"name":"LKNilRef","abstract":"<p>A nil (object) value.</p>"},"Classes.html#/c:objc(cs)LKSelfRef":{"name":"LKSelfRef","abstract":"<p>Reference to the receiver, in methods and blocks inside methods.</p>"},"Classes.html#/c:objc(cs)LKSuperRef":{"name":"LKSuperRef","abstract":"<p>Reference to the superclass of he receiver.</p>"},"Classes.html#/c:objc(cs)LKBlockSelfRef":{"name":"LKBlockSelfRef","abstract":"<p>Reference to the block object, from within its scope.</p>"},"Classes/LKEnumReference.html":{"name":"LKEnumReference","abstract":"<p>Undocumented</p>"},"Classes/LKFunctionCall.html":{"name":"LKFunctionCall","abstract":"<p>AST node representing a call to a C function.</p>"},"Classes/LKIfStatement.html":{"name":"LKIfStatement","abstract":"<p>Undocumented</p>"},"Classes/LKLiteral.html":{"name":"LKLiteral","abstract":"<p>Undocumented</p>"},"Classes/LKNumberLiteral.html":{"name":"LKNumberLiteral","abstract":"<p>Undocumented</p>"},"Classes.html#/c:objc(cs)LKFloatLiteral":{"name":"LKFloatLiteral","abstract":"<p>Floating point literal value.</p>"},"Classes.html#/c:objc(cs)LKStringLiteral":{"name":"LKStringLiteral","abstract":"<p>Undocumented</p>"},"Classes/LKLoop.html":{"name":"LKLoop","abstract":"<p>AST node representing a loop construct.</p>"},"Classes/LKLoopFlowControl.html":{"name":"LKLoopFlowControl","abstract":"<p>Abstract superclass for LKBreak and LKContinue, implementing shared behavior.</p>"},"Classes/LKBreak.html":{"name":"LKBreak","abstract":"<p>AST node representing early loop termination.</p>"},"Classes/LKContinue.html":{"name":"LKContinue","abstract":"<p>AST node representing a skip to the next loop iteration.</p>"},"Classes/LKMessageSend.html":{"name":"LKMessageSend","abstract":"<p>AST node representing a message send operation.</p>"},"Classes/LKMessageCascade.html":{"name":"LKMessageCascade","abstract":"<p>Send an array of messages to the same receiver.  The receiver expression"},"Classes/LKMethod.html":{"name":"LKMethod","abstract":"<p>AST node representing a method.</p>"},"Classes.html#/c:objc(cs)LKInstanceMethod":{"name":"LKInstanceMethod","abstract":"<p>Undocumented</p>"},"Classes.html#/c:objc(cs)LKClassMethod":{"name":"LKClassMethod","abstract":"<p>Undocumented</p>"},"Classes.html#/c:objc(cs)LKFreestandingMethod":{"name":"LKFreestandingMethod","abstract":"<p>A freestanding method is a method that is not attached to any class.  It is"},"Classes/LKModule.html":{"name":"LKModule","abstract":"<p>AST node representing a module - a set of classes and categories compiled"},"Classes/LKProperty.html":{"name":"LKProperty","abstract":"<p>Undocumented</p>"},"Classes/LKReturn.html":{"name":"LKReturn","abstract":"<p>AST node representing a method return.</p>"},"Classes.html#/c:objc(cs)LKBlockReturn":{"name":"LKBlockReturn","abstract":"<p>AST node representing a block return.</p>"},"Classes/LKSubclass.html":{"name":"LKSubclass","abstract":"<p>AST node representing a new class definition.</p>"},"Classes/LKSymbolRef.html":{"name":"LKSymbolRef","abstract":"<p>AST node representing a reference to a symbol (selector).</p>"},"Classes/LKSymbol.html":{"name":"LKSymbol","abstract":"<p>LKSymbol wraps entries in a symbol table.</p>"},"Classes/LKSymbolTable.html":{"name":"LKSymbolTable","abstract":"<p>Symbol table.  Base class, with subclasses for each scope.</p>"},"Classes/LKVariableDecl.html":{"name":"LKVariableDecl","abstract":"<p>Undocumented</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Type Definitions.html":{"name":"Type Definitions","abstract":"<p>The following type definitions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}